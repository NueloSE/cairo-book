[[questions]]
type = "MultipleChoice"
prompt.prompt = """
What test case will NOT fail for `is_even` function?
```
fn is_even(x: u64) -> bool {
	x % 2 == 0
}

#[cfg(test)]
mod tests {
	use super::{is_even};
	#[test]
	fn test_is_even() {
		// Your option is placed here during testing
	}
}
```
"""

prompt.distractors = [
	'`assert!(is_even(4) == false, "4 should be even");`',
	'`assert!(is_even(3), "3 should be odd");`',
	'`assert!(!is_even(0), "0 should be even");`',
]
answer.answer = '`assert!(!is_even(5), "5 should be odd");`'

context = """
Recall, assert! macro first argument evaluates to a Boolean.
If true, nothing happens and the test passes. If the value is false,
the test fail with a message we defined as the second argument.
"""



[[questions]]
type = "Tracing"
prompt.program = """
pub fn division_operation(number1: u16, number2: u16) -> u16 {
    if number2 == 0 {
        panic!("ZeroDivisionError Not allowed!");
    }
    let result = number1 / number2;
    result
}

#[cfg(test)]
mod tests {
    use super::{division_operation};

    #[test]
    #[should_panic(expected: ("Zerodivisionerror Not allowed!",))]
    fn test_division_operation() {
        let _ = division_operation(10, 0);
    }
}
"""
answer.doesCompile = false
answer.lineNumber = 13
context = """
The `expected string` "Zerodivisionerror Not allowed!" should be exactly
the same as `panic string` "ZeroDivisionError Not allowed!"
"""

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
What is the `test result` when this program is run with `scarb cairo-test -f test_`
```
#[cfg(test)]
mod tests {
	#[test]
	#[ignore]
	fn test_addition() {
        assert_ne!((5 + 4), 5);
    }

	#[test]
    fn division_function() {
        assert_eq!((10_u8 / 5), 2);
	}
    
	#[test]
	fn test_multiplication() {
		assert_ne!((3 * 2), 8);
        assert_eq!((5 * 5), 25);
	}
    #[test]
    fn test_subtraction() {
        assert!((12 - 11) == 1, "The first argument was false");
    }
}
"""
answer.answer = "test result: ok. 2 passed; 0 failed; 1 ignored; 1 filtered out;"
prompt.distractors = [
	"Error: test result: FAILED. 1 passed; 1 failed; 1 ignored;",
	"test result: ok. 1 passed; 0 failed; 1 ignored; 2 filtered out;",
	"test result: ok. 2 passed; 0 failed; 2 ignored; 0 filtered out;"
]

context = """
One ignored: test_addition, because it has the `ignore` attribute
One filtered out: division_with_available_gas, because it doesn't match part of the filter option specified `test_`
Zero failed
Two passed:
	- test_multiplication: All the `assert_*` macros return true
	- test_subtraction: The `assert` macro returns true
"""
